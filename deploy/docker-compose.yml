services:
  postgres:
    image: postgres:16
    container_name: backend-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"      # intra-docker
      - "29092:29092"    # host -> broker

  redis:
    image: redis:7-alpine
    container_name: backend-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2024-08-17T01-24-54Z
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data

  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: ["/bin/sh", "-c"]
    command: |
      set -e
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin}
      mc mb -p local/profiles-media || true
      mc anonymous set download local/profiles-media || true
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    restart: "no"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    mem_limit: 1g

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.1
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  adminer:
    image: adminer
    restart: always
    ports:
      - "8081:8080"
    depends_on:
      - postgres

  # ==================== MICROSERVICIOS ====================
  
  profiles-svc:
    build:
      context: ../services/profile-svc
    container_name: profiles-svc
    env_file:
      - ../services/profile-svc/.env
    environment:
      DB_HOST: postgres
      DB_USER: app
      DB_PASSWORD: app
      DB_NAME: appdb
      KAFKA_ENABLED: "true"
      MINIO_ENABLED: "true"
      MINIO_ENDPOINT: minio:9000
      MINIO_PUBLIC_URL: http://localhost:9000/profiles-media
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      minio:
        condition: service_started
      minio-setup:
        condition: service_completed_successfully
    ports:
      - "8082:8080"
    volumes:
      - ../services/profile-svc:/app
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8080/health')"]
      interval: 10s
      timeout: 3s
      retries: 5

  auth-svc:
    build:
      context: ../services/auth-svc
      dockerfile: Dockerfile
    container_name: backend-auth-svc
    ports:
      - "8006:8006"
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      
      # JWT
      JWT_SECRET: ${JWT_SECRET_KEY}
      JWT_ISSUER: ${JWT_ISSUER:-mimascota-auth}
      JWT_AUDIENCE: ${JWT_AUDIENCE:-mimascota-api}
      ACCESS_TOKEN_TTL_SECONDS: 900
      REFRESH_TOKEN_TTL_SECONDS: 1209600
      
      # SMTP
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL}
      SMTP_FROM_NAME: ${SMTP_FROM_NAME}
      
      # Security
      EMAIL_VERIFICATION_TOKEN_TTL_MINUTES: 1440
      PASSWORD_RESET_TOKEN_TTL_MINUTES: 60
      ACCOUNT_LOCK_THRESHOLD: 5
      ACCOUNT_LOCK_DURATION_MINUTES: 30
      
      # Misc
      REQUEST_ID_HEADER: X-Request-Id
      USER_REGISTERED_TOPIC: user.registered
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8006/health')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  gateway:
    build:
      context: ../services/gateway
      dockerfile: Dockerfile
    container_name: backend-gateway
    ports:
      - "8080:8080"
    environment:
      # Services URLs
      AUTH_SERVICE_URL: http://auth-svc:8006
      PROFILE_SERVICE_URL: http://profiles-svc:8080
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # JWT
      JWT_SECRET: ${JWT_SECRET_KEY}
      JWT_ISSUER: ${JWT_ISSUER:-mimascota-auth}
      JWT_AUDIENCE: ${JWT_AUDIENCE:-mimascota-api}
      
      # Security
      REQUEST_ID_HEADER: X-Request-Id
      
      # Circuit Breaker
      CIRCUIT_BREAKER_ENABLED: "true"
      CIRCUIT_BREAKER_THRESHOLD: 5
      CIRCUIT_BREAKER_TIMEOUT: 60
      CIRCUIT_BREAKER_HALF_OPEN_SUCCESSES: 2
      
      # Cache
      RESPONSE_CACHE_ENABLED: "true"
      CACHE_TTL_ME: 60
      CACHE_TTL_HEALTH: 10
      
      # CORS
      CORS_ORIGINS: http://localhost:3000,http://localhost:5173
      CORS_CREDENTIALS: "true"
    depends_on:
      auth-svc:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8080/health')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped

volumes:
  pgdata:
  minio-data:
